[1mdiff --git a/MemoryChecker b/MemoryChecker[m
[1m--- a/MemoryChecker[m
[1m+++ b/MemoryChecker[m
[36m@@ -1 +1 @@[m
[31m-Subproject commit 8ff2d93406474d89f44050c83a7467ff9e519e05[m
[32m+[m[32mSubproject commit 8ff2d93406474d89f44050c83a7467ff9e519e05-dirty[m
[1mdiff --git a/src/Smalloc.c b/src/Smalloc.c[m
[1mindex 2c653a6..de9f217 100644[m
[1m--- a/src/Smalloc.c[m
[1m+++ b/src/Smalloc.c[m
[36m@@ -64,3 +64,32 @@[m [mvoid patternRepeat(int timesToCopy, char *pattern, char *pointer){[m
 [m
   [m
 }[m
[32m+[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m *  @brief check repetitive patterns in the memory[m
[32m+[m[32m *  @arg[m[41m  [m
[32m+[m[32m */[m
[32m+[m[32mvoid patternCheck(char *pointer){[m
[32m+[m[32m  int checkingValue, i=-1;[m
[32m+[m[32m  char memory[HEADER_SIZE];[m
[32m+[m[32m  patternRepeat(5,"xyZa",memory);[m
[32m+[m[41m  [m
[32m+[m[32m  checkingValue =strcmp(memory,pointer);[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  if(checkingValue!=0){[m
[32m+[m[32m    for(i=0;i<HEADER_SIZE;i++){[m
[32m+[m[32m      checkingValue=strncmp(memory,pointer,i);[m
[32m+[m[32m      if(checkingValue!=0)[m[41m [m
[32m+[m[32m        break;[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  /*[m[41m [m
[32m+[m[32m  printf("no%s",memory);[m
[32m+[m[32m  printf("no%d",i); */[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m[32m}[m
[1mdiff --git a/src/Smalloc.h b/src/Smalloc.h[m
[1mindex bc7787c..d92cbf1 100644[m
[1m--- a/src/Smalloc.h[m
[1m+++ b/src/Smalloc.h[m
[36m@@ -18,5 +18,6 @@[m [mtypedef struct {[m
 [m
 void *_safeMalloc(int size,int lineNumber, char *fileName);[m
 void patternRepeat( int timesToCopy,char *pattern, char *pointer);[m
[32m+[m[32mvoid patternCheck(char *pointer)[m
 [m
 #endif // Smalloc_H[m
